{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","input","this","setState","id","Date","now","value","slice","tempList","push","tempList2","filter","item","className","placeholder","type","onChange","e","updateItem","target","Enter","a","new","to","add","onClick","addItem","map","listItem","deleteItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAyEeA,G,wDApEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IALS,E,uDASRC,GACTC,KAAKC,SAAS,CACZJ,QAASE,M,gCAKX,IAAMF,EAAU,CACdK,GAAIC,KAAKC,MACTC,MAAOL,KAAKJ,MAAMC,QAAQS,SAGxBC,EAAWP,KAAKJ,MAAME,KAEJ,KAAlBD,EAAQQ,OACVE,EAASC,KAAKX,GAGhBG,KAAKC,SAAS,CACZJ,QAAS,GACTC,KAAMS,M,iCAICL,GACT,IAEIO,EAFWT,KAAKJ,MAAME,KAEDY,QAAO,SAACC,GAAD,OAAUA,EAAKT,KAAOA,KAEtDF,KAAKC,SAAS,CACZH,KAAMW,M,+BAMA,IAAD,SACP,OACE,6BAEE,wBAAIG,UAAU,SAAd,iBAEA,yBAAKA,UAAU,UACb,8BAAOA,UAAU,KAAKC,YAAY,+BAA+BC,KAAK,OAAOT,MAAOL,KAAKJ,MAAMC,QAASkB,SAAU,SAACC,GAAD,OAAO,EAAKC,WAAWD,EAAEE,OAAOb,QAAQc,OAAK,EAACC,GAAC,EAACC,KAAG,EAACV,MAAI,EAACW,IAAE,EAACC,KAAG,GAAjL,oDACA,4BAAQX,UAAU,SAASY,QAAS,kBAAM,EAAKC,YAA/C,aAEF,wBAAIb,UAAU,QACXZ,KAAKJ,MAAME,KAAK4B,KAAI,SAACC,GAAD,OACnB,4BACGA,EAAStB,MACV,4BAAQO,UAAU,SAASY,QAAS,kBAAM,EAAKI,WAAWD,EAASzB,MAAnE,yB,GA7DI2B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.42959344.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newItem: '',\n      list: []\n    }\n  }\n\n  updateItem(input) {\n    this.setState({\n      newItem: input\n    })\n  }\n\n  addItem() {\n    const newItem = {\n      id: Date.now(),\n      value: this.state.newItem.slice(),\n    }\n\n    let tempList = this.state.list\n\n    if (newItem.value !== '') {\n      tempList.push(newItem)\n    }\n\n    this.setState({\n      newItem: '',\n      list: tempList\n    })\n  }\n\n  deleteItem(id) {\n    let tempList = this.state.list\n\n    let tempList2 = tempList.filter((item) => item.id !== id)\n\n    this.setState({\n      list: tempList2\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div>\n\n        <h1 className='title'>My To-do List</h1>\n\n        <div className='search'>\n          <input className='in' placeholder=\"Enter an item to add to list\" type='text' value={this.state.newItem} onChange={(e) => this.updateItem(e.target.value)} Enter a new item to add to list />\n          <button className='addBtn' onClick={() => this.addItem()}>ADD ITEM</button>\n        </div>\n        <ul className='list'>\n          {this.state.list.map((listItem) =>\n            <li>\n              {listItem.value}\n              <button className='delete' onClick={() => this.deleteItem(listItem.id)}>Delete item</button>\n            </li>)}\n        </ul>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}